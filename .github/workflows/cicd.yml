# 워크플로우 이름 지정
name: CI/CD

# 워크플로우가 시작될 조건 지정
on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SPRING_PROFILES_ACTIVE: local  # Spring Profile을 local로 설정
      spring.datasource.url: ${{ secrets.RDS_HOST }}
      spring.datasource.username: ${{ secrets.RDS_USERNAME }}
      spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
      # JASYPT_PASSWORD: ${{ secrets.JASYPT_PASSWORD }}

    steps:
      - name: 테스트
        run: echo "test" #"${{ secrets.RDS_HOST }} 입니다."

      - name: 체크아웃 Github Action
        uses: actions/checkout@v3

      - name: Set Environment Variables
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build -x test --info
        shell: bash

      # 배포용 패키지 경로 저장
      - name: Set artifact
        run: echo "artifact=$(ls ./build/libs)" >> $GITHUB_ENV

      - name: Add execute permission to deploy script
        run: chmod +x execute-deploy.sh
        shell: bash

      - name: zip 파일 생성
        run: |
          mkdir -p deploy
          cp appspec.yml deploy/
          cp execute-deploy.sh deploy/  # 스크립트 파일 포함
          cp build/libs/*.jar deploy/
          cd deploy && zip -r ./$GITHUB_SHA.zip *
          cd ../
        #  mkdir -p before-deploy
        #  cp appspec.yml before-deploy/
        #  cp build/libs/*.jar before-deploy/
        #  cd before-deploy && zip -r ./$GITHUB_SHA.zip *
        #  cd ../ && mkdir -p deploy
        #  mv before-deploy/$GITHUB_SHA.zip deploy/$GITHUB_SHA.zip
        shell: bash

      - name: AWS 자격 증명
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ap-northeast-2

      - name: S3 업로드
        run: aws s3 cp --region ap-northeast-2 ./deploy/$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/$GITHUB_SHA.zip

      - name: CodeDeploy 배포
        run: aws deploy create-deployment
          --application-name tableq-product
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name tableq-product-group
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=$GITHUB_SHA.zip

#